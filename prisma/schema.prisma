generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String     @id
  name          String
  orders        Order[]
  reviews       Review[]
  favoriteItems Favorite[]
}

model Favorite {
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([itemId, customerId])
  @@unique([itemId, customerId])
}

model Category {
  id           String       @id @default(uuid())
  name         String
  startTime    String?
  endTime      String?
  imageURL     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  categoryType CategoryType
  items        Item[]
}

enum CategoryType {
  DAILY_MEAL
  NORMAL_CATEGORY
}

model Item {
  id          String      @id @default(uuid())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  name        String
  price       Int
  description String?
  imageURL    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
  likes       Favorite[]
}

model Order {
  id              String           @id @default(uuid())
  customer        Customer         @relation(fields: [customerId], references: [id])
  customerId      String
  orderDate       DateTime         @default(now())
  orderPlaced     DateTime         @default(now())
  items           OrderItem[]
  payment         Payment?
  status          OrderStatus      @default(PENDING_PAYMENT)
  orderVerifyCode OrderVerifyCode?
}

model OrderVerifyCode {
  id        String   @id @default(uuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  code      String   @unique
  createdAt DateTime @updatedAt
}

enum OrderStatus {
  COMPLETE
  NOT_COLLECTED
  CANCELED
  PENDING_PAYMENT
  PENDING_COLLECTION
}

model OrderItem {
  id                     String  @id @default(uuid())
  item                   Item?   @relation(fields: [itemId], references: [id], onDelete: NoAction)
  itemId                 String?
  order                  Order   @relation(fields: [orderId], references: [id])
  orderId                String
  quantity               Int
  billedItemName         String?
  billedPricePerQuantity Int?
  quantityCollected      Int     @default(0)
}

model Payment {
  id                    String        @id @default(uuid())
  order                 Order         @relation(fields: [orderId], references: [id])
  orderId               String        @unique
  totalAmount           Int
  canceledTime          DateTime?
  paymentTime           DateTime?
  status                PaymentStatus @default(PENDING)
  stripePaymentIntentId String        @unique
}

enum PaymentStatus {
  CANCELED
  PENDING
  COMPLETE
}

model Review {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String
  feedback   String?
  rating     Int
}
